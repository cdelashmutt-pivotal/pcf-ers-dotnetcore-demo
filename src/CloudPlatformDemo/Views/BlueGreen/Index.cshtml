<div class="modal fade" id="postKillModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true" style="display: none;">
  <div class="modal-dialog">
      <div class="modal-content">
          <div class="modal-header">
              
              <h4 class="modal-title" id="myModalLabel">Application instance has been killed</h4>
              <button type="button" class="close" data-dismiss="modal" aria-hidden="true">×</button>
          </div>
          <div class="modal-body">
			<p>
				You've clicked on the <i><b>Kill</b></i> button and a crash command has been sent to the application. 
				If you only had one container instance running, your app is probably down.
			</p>
			<p>If running in TAS or Kubernetes, you can check the application instance
				index that got the kill request below.</p>
			<p>
				If you have more than one application instance running, then you
				can refresh the page and another application instance will
				reply. Otherwise, wait till the application is automatically
				re-started.
			</p>
	          <p>You can check the status of your app either via Tanzu Apps Manager or the CF CLI via</p>
		      <pre>cf app MYAPPNAME</pre>
			
          </div>
          <div class="modal-footer">
              <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
          </div>
      </div>
      <!-- /.modal-content -->
  </div>
  <!-- /.modal-dialog -->
</div>
<div class="row" id="blueGreen">
	<div class="col-xl-6">
		<div class="card shadow" >
			<div class="card-header py-3">
				<h6 class="m-0 font-weight-bold text-primary">Blue Green Deployment</h6>
			</div>
			<div class="card-body">
				This demo shows how one can deploy a new version of the app, verify that everything works after deployment and app is ready, and then redirect traffic to it. 
				<demofragment name="Instructions"/>
				<hr/>
				<div class="float-right">
					<a v-on:click="killApp" class="btn btn-danger btn-icon-split" tabindex="1">
						<span class="icon text-white-50">
							<i class="fas fa-trash"></i>
						</span>
						<span class="text">Kill</span>
					</a>
					<a id="resetButton" v-on:click="reset" v-if="!isRunning" class="btn btn-primary" tabindex="1">Reset</a>
					<a id="loadButton" v-on:click="toggleTimer" class="btn btn-primary" tabindex="2">{{ loadButtonLabel }}</a>
				</div>




				<div  class="col-6">
					<div class="tab-pane fade show active" id="bluegreenpane" role="tabpanel" aria-labelledby="home-tab">
						<p>
							This page shows the load balancing between application versions
							based on route mappings.
						</p>

						<p v-for="(summary, name) in apps">
							<b>{{ name }}</b> - {{ summary.count - 1 }}
						</p>

						<canvas id="pie" width="400" height="400"></canvas>

					</div>

				</div>
			</div>
	
		</div>
	</div>
</div>

<script>
Chart.pluginService.register({
  beforeDraw: function(chart) {
    if (chart.config.options.elements.center) {
      // Get ctx from string
      var ctx = chart.chart.ctx;

      // Get options from the center object in options
      var centerConfig = chart.config.options.elements.center;
      var fontStyle = centerConfig.fontStyle || 'Arial';
      var txt = centerConfig.text;
      var color = centerConfig.color || '#000';
      var maxFontSize = centerConfig.maxFontSize || 75;
      var sidePadding = centerConfig.sidePadding || 20;
      var sidePaddingCalculated = (sidePadding / 100) * (chart.innerRadius * 2)
      // Start with a base font of 30px
      ctx.font = "30px " + fontStyle;

      // Get the width of the string and also the width of the element minus 10 to give it 5px side padding
      var stringWidth = ctx.measureText(txt).width;
      var elementWidth = (chart.innerRadius * 2) - sidePaddingCalculated;

      // Find out how much the font can grow in width.
      var widthRatio = elementWidth / stringWidth;
      var newFontSize = Math.floor(30 * widthRatio);
      var elementHeight = (chart.innerRadius * 2);

      // Pick a new font size so it will not be larger than the height of label.
      var fontSizeToUse = Math.min(newFontSize, elementHeight, maxFontSize);
      var minFontSize = centerConfig.minFontSize;
      var lineHeight = newFontSize; //centerConfig.lineHeight || 25;
      var wrapText = false;

      if (minFontSize === undefined) {
        minFontSize = 20;
      }

      if (minFontSize && fontSizeToUse < minFontSize) {
        fontSizeToUse = minFontSize;
        wrapText = true;
      }

      // Set font settings to draw it correctly.
      ctx.textAlign = 'center';
      ctx.textBaseline = 'middle';
      var centerX = ((chart.chartArea.left + chart.chartArea.right) / 2);
      var centerY = ((chart.chartArea.top + chart.chartArea.bottom) / 2);
      ctx.font = fontSizeToUse + "px " + fontStyle;
      ctx.fillStyle = color;

      // if (!wrapText) {
      //   ctx.fillText(txt, centerX, centerY);
      //   return;
      // }

      var lines = txt.split('\n');
      
      // Move the center up depending on line height and number of lines
      centerY -= lines.length  * (lineHeight / 2) / 2;

      for (var n = 0; n < lines.length; n++) {
        ctx.fillText(lines[n], centerX, centerY);
        centerY += lineHeight;
      }
      //Draw text in center
      //ctx.fillText(line, centerX, centerY);
    }
  }
});
var colors = [ "#90A6D4", "#90D49C" ];
var pageModel = new Vue({
  el: '#blueGreen',
  data: {
  	apps: {},
  	timerID: 0,
  	loadButtonLabel: "Start Simulation",
  	isRunning: false,
  	pieChart: {},
  	radarChart: {},
  	lastPing: {},
  	totalHits: 0,
  	error: false
  },
  mounted: function() {
    this.pieChart = new Chart($('#pie'), {
        type: 'doughnut',
        data: {
            labels: ['Blue', 'Green'],
            datasets: [{
                data: [10,1],
                backgroundColor: colors,
                borderColor: ['black', 'black'],
                borderWidth: 1
            }]
        },
        options: {
			// circumference:  Math.PI,
			// rotation: -Math.PI ,
        	elements: {
                center: {
                  text: 'Click Start Simulation',
                  color: '#FF6384', // Default is #000000
                  fontStyle: 'Arial', // Default is Arial
                  sidePadding: 20, // Default is 20 (as a percentage)
                  minFontSize: 15, // Default is 20 (in px), set to false and text will not wrap.
                  maxFontSize: 30, // Default is 20 (in px), set to false and text will not wrap.
                  lineHeight: 75 // Default is 25 (in px), used for when text wraps
                }
              }
        }
    });
    
    this.radarChart = new Chart($('#radar'), {
            type: 'radar',
            data: {
                labels: ['Red', 'Blue', 'Yellow', 'Green', 'Purple', 'Orange'],
                datasets: [{
                    label: '# of Votes',
                    data: [12, 19, 3, 5, 2, 3],
                    backgroundColor: [
                        'rgba(255, 99, 132, 0.2)',
                        'rgba(54, 162, 235, 0.2)',
                        'rgba(255, 206, 86, 0.2)',
                        'rgba(75, 192, 192, 0.2)',
                        'rgba(153, 102, 255, 0.2)',
                        'rgba(255, 159, 64, 0.2)'
                    ],
                    borderColor: [
                        'rgba(255, 99, 132, 1)',
                        'rgba(54, 162, 235, 1)',
                        'rgba(255, 206, 86, 1)',
                        'rgba(75, 192, 192, 1)',
                        'rgba(153, 102, 255, 1)',
                        'rgba(255, 159, 64, 1)'
                    ],
                    borderWidth: 3
                }]
            },
            options: {
                animation: {
                    duration: 0
                }
            }
        });
    
  },
  methods: {
  	killApp: function () {
		var killUrl = "@Url.Action("Kill", "BlueGreen")";
		$.get(killUrl, function(isKilled) {
			if(isKilled)
			{
				$("#postKillModal").modal();
			}
		});
  	},
  	setActiveTabBlueGreen: function() {

		//this.bindChart();
        
  	},
    reset: function () {
      // for (var version in this.apps) {
      // 		this.apps[version] = 1;
      // 	}
      this.apps = {};
      this.totalHits = 0;
      this.bindChart();

    },
    toggleTimer: function() {
    	var INTERVAL = 1000;
    	self = this;
     	if (!this.isRunning) {
     		this.timerID = setInterval(function() {
     		  	var infoUrl = "@Url.Action("InstanceInfo","Home")";
				
				$.get(infoUrl, function(appEnv) {
					console.log(appEnv);
					Vue.set(self, "error", false);
					var app = self.apps[appEnv.deploymentName] ?? {count: 1, instances: {}};
					app.count++;
					self.totalHits++;
					Vue.set(self.apps, appEnv.deploymentName, app);
					//app.instances[appEnv.instanceName] = 1 + (app.instances[appEnv.instanceName] ?? 0);
					Vue.set(self.apps[appEnv.deploymentName].instances, appEnv.instanceName, 1 + (self.apps[appEnv.deploymentName].instances[appEnv.instanceName] ?? 0));
					// console.log(self.apps[appEnv.appName].instances[appEnv.instanceName]);
					self.lastPing = appEnv;
					
				})
				.fail(() => {
					Vue.set(self, "error", true);
				})
				.always(function () { 
					self.bindChart();
				 });
     		}, INTERVAL);
     		this.loadButtonLabel = "Stop Simulation";
     		this.isRunning = true;
     	} else {
			clearInterval(this.timerID);
     		this.loadButtonLabel = "Start Simulation";
     		this.isRunning = false;
     	}
    },
    bindBar: function() {
    	
	},
    // ping: function() {
    //	
    // },
    bindChart: function() {
		var pieData = [];
		var pieLabels = [];
		var instanceMap = {};
		var i = 0;
		var instanceIndex = 0;
		this.radarChart.data.labels = [];
		var datasets = [];
		for ( var deploymentName in this.apps) {
			pieData.push(this.apps[deploymentName].count);
			pieLabels.push(deploymentName);
			// this.radarChart.data.datasets[i] = { label: appName, data:[]};
			// datasets[i] = {label: appName,  borderColor: colors[i], data: []};
			//
			//
			// for(var instance in this.apps[appName].instances){
			//
			// 	if(instanceMap[instance] === undefined){
			// 		instanceMap[instance] = instanceIndex;
			// 		instanceIndex++;
			// 		this.radarChart.data.labels.push(instance);
			// 	}
			//
			// 	if(datasets[i].data[instanceMap[instance]] === undefined){
			// 		datasets[i].data[instanceMap[instance]] = 0;
			// 	}
			// 	datasets[i].data[instanceMap[instance]] += this.apps[appName].instances[instance];
			//	
			// }
			// for(var x=0;x<instanceIndex;x++){
			// 	if(datasets[i].data[x] === undefined) {
			// 		datasets[i].data[x] = 0;
			// 	}
			// }
			i++;
		}
		console.log(pieLabels);
		console.log(datasets);
		this.radarChart.data.datasets = datasets;

		
		//this.radarChart.data.labels = ['test'];
		//this.radarChart.data.datasets[0] = { label: 'hello', data: []};
		this.pieChart.data.labels = pieLabels;
		this.pieChart.data.datasets.forEach((dataset) => {
				dataset.data = pieData;
			});
		console.log(this.error);
		if (!this.error)
			this.pieChart.options.elements.center.text = this.lastPing.deploymentName + '\n' + this.totalHits;
		else
			this.pieChart.options.elements.center.text = "ERROR";
		this.pieChart.update();
		//this.radarChart.update();
    }
  }
})



</script>
