@using Articulate.Models
@inject AppEnv _app
<div class="card shadow mb-4" id="db-demo">
    <div class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
        <h6 class="m-0 font-weight-bold text-primary">Database tool</h6>
        <div class="dropdown no-arrow">
            <a class="dropdown-toggle" href="#" role="button" id="dropdownMenuLink" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                <i class="fas fa-ellipsis-v fa-sm fa-fw text-gray-400"></i>
            </a>
            <div class="dropdown-menu dropdown-menu-right shadow animated--fade-in" aria-labelledby="dropdownMenuLink" x-placement="bottom-end" style="position: absolute; will-change: transform; top: 0px; left: 0px; transform: translate3d(-156px, 18px, 0px);">
                <a class="dropdown-item" href="#"  data-toggle="modal" data-target="#dbConnectionInfo">Connection info</a>
                @* <a class="dropdown-item" href="#">Migrate Database</a> *@
            </div>
        </div>
    </div>
    <div class="card-body">
        <p>TAS provides easy way to provision services such as databases, message brokers, etc from internal marketplace and attach (aka <i>bind</i>) them to your app. 
        TAS will inject service specific information (such as db connection string) as part of <code>VCAP_SERVICES</code> environmental variable in JSON format. 
        Steeltoe will help you not only parse this info, but automatically con configure objects in service container to be intialized and ready to go with this connection info. </p>
        <p>In this example Steeltoe has configured Entity Framework DBContext to be initialized with the correct driver and connection string based on service binding. Click the tripple dot icon in 
            top right to confirm current database connection information. If you haven't bound a real database, this sample defaults using SQLite database.</p>
        <p>You can create a persistent MySQL database and bind it to this app to make this sample use that instead. Follow these steps in to do this: </p>
        <ol>
            <li>Confirm the MySQL service type and plan by running <code>cf marketplace</code>. If you don't see MySQL offering, your administrator needs to install 
                <a href="https://network.pivotal.io/products/pivotal-mysql/">MySQL Tile</a> into TAS.</li>
            <li>Create service: <code>cf create-service p.mysql db-small mysql</code>. This will take a few minutes to create as it's spinning up a dedicated MySQL VM. 
                <br/>You can confirm by checking status using <code>cf service mysql</code>.</li>
            <li>Once service is provisioned, bind it to your app: <code>cf bind-service  @_app.AppName mysql</code></li>
            <li>Restart the app to make it pick up new service binding environmental variable: <code>cf restart @_app.AppName</code></li>
        </ol>
        <hr/>
        <div class="row">
            <div class="col-xl-3">
                @* <form id="attendee-form" action="add-attendee" method="post"> *@
                <div>
                    <label>First Name</label>
                    <input type="text" class="form-control" required="required" id="firstName" name="firstName" v-model="user.firstName">
                </div>
                <div class="form-group">
                    <label>Last Name</label>
                    <input type="text" class="form-control" required="required" id="lastName" name="lastName" v-model="user.lastName">
                </div>
                <div class="form-group">
                    <label>Email</label>
                    <input type="emailAddress" class="form-control" required="required" id="emailAddressAddress" name="emailAddressAddress" v-model="user.emailAddress">
                </div>
                <a href="#" class="btn btn-primary btn-icon-split">
                    <span class="icon text-white-50">
                        <i class="fas fa-plus"></i>
                    </span>
                    <span class="text" v-on:click="add">Add</span>
                </a>
                <a href="#" class="btn btn-danger btn-icon-split">
                    <span class="icon text-white-50">
                        <i class="fas fa-trash"></i>
                    </span>
                    <span class="text" v-on:click="clear">Clear</span>
                </a>
                @* <button type="submit" class="btn btn-primary">Add</button> *@
                @* </form> *@
                <hr/>
            </div>

            <div class="col-xl-9">
                <table class="table table-bordered dataTable" id="dataTable" width="100%" cellspacing="0" role="grid" aria-describedby="dataTable_info" style="width: 100%;">
                    <thead>
                    <tr role="row">
                        <th>First Name</th>
                        <th>Last Name</th>
                        <th>Email</th>
                    </tr>
                    </thead>
                    <tbody>
                    <tr v-for="user in users">
                        <td>{{ user.firstName }}</td>
                        <td>{{ user.lastName }}</td>
                        <td>{{ user.emailAddress }}</td>
                    </tr>
                    </tbody>
                </table>
            </div>
        </div>
    </div>
    <div class="modal fade" id="dbConnectionInfo" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true" style="display: none;">
        <div class="modal-dialog modal-xl">
            <div class="modal-content">
                <div class="modal-header">
    
                    <h4 class="modal-title" id="myModalLabel">Db Connection Info</h4>
                    <button type="button" class="close" data-dismiss="modal" aria-hidden="true">Ã—</button>
                </div>
                <div class="modal-body">
                    <div class="row">
                        <div class="col-3">
                            <strong>Provider:</strong>
                        </div>
                        <div class="col-sm">{{ db.providerName }}</div>
                    </div>
                    <div class="row">
                        <div class="col-3">
                            <strong>Connection String:</strong>
                        </div>
                        <div class="col-sm"><code>{{ db.connectionString }}</code></div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                </div>
            </div>
            <!-- /.modal-content -->
        </div>
        <!-- /.modal-dialog -->
    </div>
</div>
<script>
var pageModel = new Vue({
    el: '#db-demo',
    data: {
        user: {
            firstName: "andrew",
            lastName: "stakhov",
            emailAddress: "test@test.com"
        },
        users: [
        {
            firstName: "andrew",
            lastName: "stakhov",
            emailAddress: "test@test.com"
        }],
        db: {}
    },
    _this: this,
    mounted: function() {
        this.refresh();
        var self = this;
        var dbConnectionUrl = "@Url.Action("GetDbConnectionInfo","Services")";
        $.get(dbConnectionUrl)
        .done(function (result){ 
            self.db = result;
        })
    },
    methods: {
        add: function () {
            var self = this;
            var addUserUrl = "@Url.Action("AddUser","Services")";
            $.post(addUserUrl, this.user)
             .always(function () {
                self.refresh();
            });
            
        },
        clear: function () {
            var self = this;
            var clearUrl = "@Url.Action("ClearUsers","Services")";
            $.post(clearUrl, function () { self.refresh() });
        },
        refresh: function (){
            var getUsers = "@Url.Action("GetUsers","Services")";
            var self = this;
            $.get(getUsers, function (users) {
                  self.users = users;
            });
        },
        
    }
});
</script>